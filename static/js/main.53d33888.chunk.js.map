{"version":3,"sources":["App.js","index.js"],"names":["App","_ref","_ref2","_useState","useState","_useState2","_slicedToArray","isModelLoading","setIsModelLoading","_useState3","_useState4","model","setModel","_useState5","_useState6","imageURL","setImageURL","_useState7","_useState8","classificationResults","setResults","imageRef","useRef","fileInputRef","showResultHolderDisplay","showResultsFrame","resultsHolderFrame","document","getElementsByClassName","style","display","showPageDivider","showDivider","divider","useEffect","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_model","wrap","_context","prev","next","mobilenet","version","alpha","sent","t0","console","log","stop","apply","arguments","loadModel","_jsxs","className","children","_jsx","Box","sx","justifyContent","CircularProgress","color","type","accept","capture","onChange","e","files","target","length","url","URL","createObjectURL","ref","onClick","current","click","_callee2","_context2","classify","src","alt","crossOrigin","map","result","index","probability","toFixed","ReactDOM","render","React","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.53d33888.chunk.js","sourcesContent":["import './App.css';\nimport { useState, useEffect, useRef } from 'react';\nimport * as mobilenet from \"@tensorflow-models/mobilenet\"; // Refer: https://github.com/tensorflow/tfjs-models/tree/master/mobilenet\nimport CircularProgress from \"@mui/material/CircularProgress\"; // refer: https://mui.com/material-ui/react-progress/#circular-indeterminate\nimport Box from \"@mui/material/Box\";\nimport IconSpinner from 'terra-icon/lib/icon/IconSpinner';\nimport Spacer from 'terra-spacer';\n\nfunction App() {\n    const [isModelLoading, setIsModelLoading] = useState(false)\n    const [model, setModel] = useState(null)\n    const [imageURL, setImageURL] = useState(null);\n    const [classificationResults, setResults] = useState([])\n\n    const imageRef = useRef()\n    const fileInputRef = useRef()\n\n    function showResultHolderDisplay(showResultsFrame) {\n      const resultsHolderFrame = document.getElementsByClassName('resultsHolder')[0];\n      if (!resultsHolderFrame) return;\n\n      if (showResultsFrame) {\n        resultsHolderFrame.style.display = 'block';\n      }\n      else {\n        resultsHolderFrame.style.display = 'none';\n      }\n    }\n\n    // function runtimeMediaHandler(viewPort) {\n    //   const resultsHolderFrame = document.getElementsByClassName('resultsHolder')[0];\n    //   if (!resultsHolderFrame) return;\n    //   if (viewPort.matches) { // If media query matches\n    //     resultsHolderFrame.style.display = 'block';\n    //   } else {\n    //     resultsHolderFrame.style.display = 'none';      }\n    // }\n\n    // var mediaViewPort = window.matchMedia(\"(max-width: 800px)\")\n    // runtimeMediaHandler(mediaViewPort);\n    // mediaViewPort.addListener(runtimeMediaHandler) // Attach listener function on state changes  \n\n    function showPageDivider(showDivider) {\n      const divider = document.getElementsByClassName('divider')[0];\n      if (!divider) return;\n\n        if (showDivider) {\n          divider.style.display = 'block';\n        }\n        else {\n          divider.style.display = 'none';\n        }\n    }\n\n    const loadModel = async () => {\n        setIsModelLoading(true)\n        try {\n          // mobilenet is the module name, which is automatically included when you use the <script src> method\n          // When using ES6 imports, mobilenet is the module.\n          // Refer: https://github.com/tensorflow/tfjs-models/tree/master/mobilenet\n          const model = await mobilenet.load({ version: 2,\n            alpha: 1.0 });\n          setModel(model);\n          setIsModelLoading(false);\n        } catch (error) {\n          console.log(error)\n          setIsModelLoading(false)\n        }\n    }\n\n    const uploadImage = (e) => {\n      showResultHolderDisplay(false);\n      showPageDivider(false);\n        const { files } = e.target\n        if (files.length > 0) {\n            const url = URL.createObjectURL(files[0])\n            setImageURL(url)\n        } else {\n            // cancel open file dialog\n            setImageURL(null)\n          }\n    }\n\n    // Predict the probable classes of the image\n    const classifyImage = async () => {\n      // You can make a classification with mobilenet without needing to create a Tensor with\n      // MobileNet.classify, which takes an input image element and returns an array with top classes and their probabilities.\n      // Refer: https://github.com/tensorflow/tfjs-models/tree/master/mobilenet\n      const classificationResults = await model.classify(imageRef.current)\n      setResults(classificationResults)\n      showResultHolderDisplay(true);\n      showPageDivider(true);\n    }\n\n    const triggerUpload = () => {\n      fileInputRef.current.click()\n    }\n\n    useEffect(() => {\n      loadModel()\n    }, [])\n\n    if (isModelLoading) {\n      return (\n        <div className=\"modelloading\">\n          <h1 className=\"\">Loading Mobilenet Model...</h1>\n          <Box sx={{ display: \"flex\", justifyContent: \"center\" }}>\n            <CircularProgress color=\"inherit\"/>\n          </Box>\n        </div>\n      );\n\n      // return (\n      //   <div className=\"modelloading\">\n      //   <h1 className=\"\">Loading Mobilenet Model...</h1>\n      //   <Spacer marginTop=\"large+2\">\n      //     <IconSpinner isSpin height=\"28\" width=\"28\" />\n      //   </Spacer>\n      // </div>)\n    }\n\n    return (\n        <div className=\"App\">\n            <h1 className='pageHeader'>Image Classification</h1>\n            <div className='buttonsHolder'>\n                <input type='file' accept='image/*' capture='camera' className='uploadInput' onChange={uploadImage} ref={fileInputRef} />\n                <button className='uploadImage' onClick={triggerUpload}>Upload Image</button>\n                {imageURL && <button className='classifyButton' onClick={classifyImage}>Classify Image</button>}\n            </div>\n            <div className=\"mainWrapper\">\n                <div className=\"mainContent\">\n                    <div className=\"imageHolder\">\n                        {imageURL && <img src={imageURL} alt=\"Image Preview\" crossOrigin=\"anonymous\" ref={imageRef} />}\n                    </div>\n                    <div className=\"divider\"></div>\n                    {classificationResults.length > 0 && <div className='resultsHolder'>\n                    <h1 className=\"classificationResults\">Classification Results</h1>\n                        {classificationResults.map((result, index) => {\n                            return (\n                                <div className='result' key={result.className}>\n                                    <span className='name'>{result.className}</span>\n                                    <span className='confidence'>Confidence level: {(result.probability * 100).toFixed(2)}% {index === 0 && <span className='bestGuess'>Best Guess</span>}</span>\n                                </div>\n                            )\n                        })}\n                    </div>}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}